<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="iconPictureBox1.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>